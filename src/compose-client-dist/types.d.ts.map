{"mappings":"AAEA;IACE,KAAK,EAAE,MAAM,CAAC;IACd,EAAE,EAAE,MAAM,CAAC;CACZ;ACgID,8BAA8B,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,QAQ5D;AAED,8BAA8B,IAAI,EAAE,MAAM,EAAE,YAAY,EAAE,OAAO,aAIhE;AAMD,0CAA0C,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,QAMlE;AAED,+BAA+B,CAAC,EAAE,KAAK,EAAE,CAAC,aAErB,CAAC,cACrB;AAED,gCAAgC,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,EACvD,IAAI,EACJ,YAAY,EACZ,OAAO,EACP,SAAgB,GACjB,EAAE;IACD,IAAI,EAAE,MAAM,CAAC;IACb,YAAY,EAAE,KAAK,CAAC;IACpB,OAAO,EAAE,CACP,KAAK,EAAE,KAAK,EACZ,MAAM,EAAE,MAAM,EACd,OAAO,EAAE,CAAC,QAAQ,EAAE,QAAQ,KAAK,IAAI,KAClC,KAAK,CAAC;IACX,SAAS,EAAE,OAAO,CAAC;CACpB,aAeA;AAmCD,+CASC;AAED,+BAGC","sources":["client/shared-types.ts","client/index.ts"],"sourcesContent":["// THIS FILE IS DUPLICATED IN THE CLIENT SIDE LIBRARY\n\nexport interface User {\n  email: string;\n  id: number;\n}\n\ninterface SendMagicLinkRequest {\n  type: \"SendMagicLinkRequest\";\n  email: string;\n  appName: string;\n  redirectURL: string;\n  requestId: string;\n}\n\ninterface LoginRequest {\n  type: \"LoginRequest\";\n  token: string;\n}\n\ninterface LogoutRequest {\n  type: \"LogoutRequest\";\n}\n\ninterface SubscribeRequest {\n  type: \"SubscribeRequest\";\n  name: string;\n}\n\ninterface UnsubscribeRequest {\n  type: \"UnsubscribeRequest\";\n  name: string;\n}\n\ninterface StateUpdateRequest {\n  type: \"StateUpdateRequest\";\n  name: string;\n  value: unknown;\n}\n\ninterface ReducerEventRequest {\n  type: \"ReducerEventRequest\";\n  name: string;\n  value: unknown;\n}\n\ninterface RegisterReducerRequest {\n  type: \"RegisterReducerRequest\";\n  name: string;\n  initialState: unknown;\n  reducerCode: string;\n  isPrivate: boolean;\n}\n\nexport type Request =\n  | SendMagicLinkRequest\n  | LoginRequest\n  | LogoutRequest\n  | SubscribeRequest\n  | UnsubscribeRequest\n  | StateUpdateRequest\n  | ReducerEventRequest\n  | RegisterReducerRequest;\n\ninterface SendMagicLinkResponse {\n  type: \"SendMagicLinkResponse\";\n  error?: string;\n  requestId: string;\n}\n\ninterface LoginResponse {\n  type: \"LoginResponse\";\n  token?: string;\n  error?: string;\n  requestId?: string;\n  user?: User;\n}\n\ninterface LogoutResponse {\n  type: \"LogoutResponse\";\n  error?: string;\n}\n\ninterface UpdatedValueProperties {\n  name: string;\n  value: unknown;\n  timestamp: number;\n}\n\ninterface SubscribeResponse extends UpdatedValueProperties {\n  type: \"SubscribeResponse\";\n}\n\ninterface UpdatedValueResponse extends UpdatedValueProperties {\n  type: \"UpdatedValueResponse\";\n}\n\ninterface UnsubscribeResponse {\n  type: \"UnsubscribeResponse\";\n  name: string;\n  error?: string;\n}\n\ninterface StateUpdateResponse {\n  type: \"StateUpdate\";\n  name: string;\n  value: unknown;\n}\n\ninterface ReducerEventResponse {\n  type: \"ReducerEvent\";\n  name: string;\n  value: unknown;\n}\n\ninterface ParseErrorResponse {\n  type: \"ParseErrorResponse\";\n  cause: string;\n}\n\ninterface RegisterReducerResponse {\n  type: \"RegisterReducerResponse\";\n  name: string;\n  error?: \"Unauthorized\" | string;\n  warn?: \"New initial state ignored\" | string;\n}\n\nexport type Response =\n  | SendMagicLinkResponse\n  | LoginResponse\n  | LogoutResponse\n  | SubscribeResponse\n  | UnsubscribeResponse\n  | StateUpdateResponse\n  | ReducerEventResponse\n  | UpdatedValueResponse\n  | ParseErrorResponse\n  | RegisterReducerResponse;\n","import { useState, useEffect } from \"react\";\nimport { Request, Response, User } from \"./shared-types\";\n\n// Create WebSocket connection\nconst socket = new WebSocket(\"ws://localhost:3000\");\n\n// utils\nfunction safeParseJSON(str: string | null) {\n  if (!str) {\n    return null;\n  }\n\n  try {\n    return JSON.parse(str);\n  } catch (e) {\n    return null;\n  }\n}\n\nfunction send(data: Request) {\n  socket.send(JSON.stringify(data));\n}\n\n// globals\nconst subscriptions: {\n  [key: string]: Set<(data: React.SetStateAction<unknown>) => void>;\n} = {};\n\nlet loggedInUser: User | null = null;\nif (localStorage.getItem(\"ComposeCachedUser\")) {\n  loggedInUser = safeParseJSON(localStorage.getItem(\"ComposeCachedUser\"));\n}\nconst loggedInUserSubscriptions = new Set<(user: User) => void>();\n\nconst ensureSet = (name: string) =>\n  (subscriptions[name] = subscriptions[name] || new Set());\n\nconst magicLinkLoginCallbacks: {\n  [key: string]: [(user: User) => void, (error: string) => void];\n} = {};\n\n//////////////////////////////////////////\n// SETUP\n//////////////////////////////////////////\n\n// On page load, check if the URL contains the `magicLinkToken` param\nconst magicLinkToken = new URLSearchParams(window.location.search).get(\n  \"ComposeMagicLinkToken\"\n);\nif (magicLinkToken) {\n  send({\n    type: \"LoginRequest\",\n    token: magicLinkToken,\n  });\n}\n\nsocket.addEventListener(\"open\", function (event) {\n  if (localStorage.getItem(\"compose-token\")) {\n    send({\n      type: \"LoginRequest\",\n      token: localStorage.getItem(\"compose-token\") as string,\n    });\n  }\n});\n\n//////////////////////////////////////////\n// HANDLE SERVER RESPONSES\n//////////////////////////////////////////\n\nsocket.addEventListener(\"message\", function (event) {\n  const data: Response | null = safeParseJSON(event.data);\n  if (!data) {\n    console.error(\"Invalid JSON received from server\");\n    console.error(event);\n    return;\n  }\n\n  if (\n    data.type === \"SubscribeResponse\" ||\n    data.type === \"UpdatedValueResponse\"\n  ) {\n    ensureSet(data.name).forEach((callback) => callback(data.value));\n  } else if (data.type === \"LoginResponse\") {\n    if (data.token) {\n      localStorage.setItem(\"compose-token\", data.token);\n      loggedInUser = data.user || null;\n      magicLinkLoginCallbacks[data.requestId as string]?.[0](data.user as User);\n    } else if (data.error) {\n      magicLinkLoginCallbacks[data.requestId as string]?.[1](data.error);\n    } else {\n      // token already saved in localStorage, so just call the callback\n      loggedInUser = data.user || null;\n      magicLinkLoginCallbacks[data.requestId as string]?.[0](data.user as User);\n    }\n  } else if (data.type === \"ParseErrorResponse\") {\n    console.error(\"Sent invalid JSON to server\");\n    console.error(data.cause);\n  }\n});\n\n//////////////////////////////////////////\n// Common: Cloud State & Reducer\n//////////////////////////////////////////\n\nfunction useSubscription(name: string, setState: (data: unknown) => void) {\n  useEffect(() => {\n    if (!ensureSet(name).size) {\n      socket.send(\n        JSON.stringify({\n          action: \"subscribe\",\n          name,\n        })\n      );\n    }\n    subscriptions[name].add(setState);\n    return () => {\n      subscriptions[name].delete(setState);\n      if (!ensureSet(name).size) {\n        socket.send(\n          JSON.stringify({\n            action: \"unsubscribe\",\n            name,\n          })\n        );\n      }\n    };\n  }, [setState]);\n}\n\n//////////////////////////////////////////\n// Cloud State\n//////////////////////////////////////////\n\nexport function setCloudState<A>(name: string, value: unknown) {\n  socket.send(\n    JSON.stringify({\n      action: \"update\",\n      name,\n      value,\n    })\n  );\n}\n\nexport function useCloudState(name: string, initialState: unknown) {\n  const [state, setState] = useState(initialState);\n  useSubscription(name, setState);\n  return [state, (s: unknown) => setCloudState(name, s)];\n}\n\n//////////////////////////////////////////\n// CLOUD REDUCER\n//////////////////////////////////////////\n\nexport function dispatchCloudReducerEvent<A>(name: string, event: A) {\n  send({\n    type: \"ReducerEventRequest\",\n    name,\n    value: event,\n  });\n}\n\nexport function useReducerTest<A>(value: A) {\n  const [state, setState] = useState(value);\n  return [state, (s: A) => setState(s)];\n}\n\nexport function useCloudReducer<State, Action, Response>({\n  name,\n  initialState,\n  reducer,\n  isPrivate = true,\n}: {\n  name: string;\n  initialState: State;\n  reducer: (\n    state: State,\n    action: Action,\n    reducer: (response: Response) => void\n  ) => State;\n  isPrivate: boolean;\n}) {\n  const [state, setState] = useState(initialState as unknown);\n  useSubscription(name, setState);\n\n  useEffect(() => {\n    send({\n      type: \"RegisterReducerRequest\",\n      name,\n      reducerCode: reducer.toString(),\n      isPrivate,\n      initialState,\n    });\n  }, [name, reducer, isPrivate, initialState]);\n\n  return [state, (s: State) => dispatchCloudReducerEvent(name, s)];\n}\n\n//////////////////////////////////////////\n// USER & AUTH\n//////////////////////////////////////////\n\nfunction magicLinkLogin({\n  email,\n  appName,\n  redirectUrl,\n}: {\n  email: string;\n  appName: string;\n  redirectUrl?: string;\n}): Promise<User> {\n  const requestId = Math.random().toString();\n  const promise = new Promise<User>((resolve, reject) => {\n    magicLinkLoginCallbacks[requestId] = [resolve, reject];\n  });\n\n  redirectUrl = redirectUrl || window.location.href;\n\n  socket.send(\n    JSON.stringify({\n      action: \"MagicLinkLogin\",\n      email,\n      appName,\n      redirectUrl,\n      requestId,\n    })\n  );\n\n  return promise;\n}\n\nexport function useLoggedInUser() {\n  const [user, setUser] = useState<User | null>(null);\n  useEffect(() => {\n    loggedInUserSubscriptions.add(setUser);\n    return () => {\n      loggedInUserSubscriptions.delete(setUser);\n    };\n  });\n  return user;\n}\n\nexport function logout() {\n  localStorage.removeItem(\"compose-token\");\n  socket.send(JSON.stringify({ type: \"LogoutRequest\" }));\n}\n"],"names":[],"version":3,"file":"types.d.ts.map"}